type: output
files:
- name: tests/output.txt
  visible: false
  text: |
    Стакан объёмом 200. Объём жидкости = 100
    [Glass(50, 50), Glass(100, 100), Glass(150, 150), Glass(200, 200), Glass(250, 250)]
  learner_created: false
- name: main.py
  visible: true
  placeholders:
  - offset: 418
    length: 173
    placeholder_text: '...  # TODO метод должен возвращать строку, которая содержит
      человеко-читаемую информацию'
    initial_state:
      length: 89
      offset: 418
    initialized_from_dependency: false
    selected: true
    status: Failed
    encrypted_possible_answer: return f"Стакан объёмом {self.capacity_volume}. Объём
      жидкости = {self.occupied_volume}"
  text: |
    from typing import Union


    class Glass:
        def __init__(self, capacity_volume: Union[int, float], occupied_volume: Union[int, float]):
            self.capacity_volume = capacity_volume  # объем стакана
            self.occupied_volume = occupied_volume  # объем жидкости в стакане

        def __repr__(self) -> str:
            return f"Glass({self.capacity_volume}, {self.occupied_volume})"

        def __str__(self) -> str:
            ...  # TODO метод должен возвращать строку, которая содержит человеко-читаемую информацию


    if __name__ == "__main__":
        glass = Glass(200, 100)  # экземпляр класса

        print(glass)  # Стакан объёмом 200. Объём жидкости = 100
        print([Glass(i, i) for i in range(50, 251, 50)])  # [Glass(50, 50), Glass(100, 100), Glass(150, 150), Glass(200, 200), Glass(250, 250)]
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Failed
feedback:
  message: Incorrect
  time: Thu, 09 Jun 2022 17:51:18 UTC
  expected: |
    Стакан объёмом 200. Объём жидкости = 100
    [Glass(50, 50), Glass(100, 100), Glass(150, 150), Glass(200, 200), Glass(250, 250)]
  actual: |
    объем стакана = 200, обьем жидкости 100
    [Glass(50, 50), Glass(100, 100), Glass(150, 150), Glass(200, 200), Glass(250, 250)]
record: -1
